<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp">

    <!--  Menu button  -->
    <Style x:Key="menuButtonStyle" TargetType="RadioButton">
        <Setter Property="GroupName" Value="ViewsButtonGroup" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource MenuForegroundColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border
                        Margin="0,0,0,60"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="10,0,0,0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--  Button Style on hover  -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource Self}}" />
                <Setter Property="Foreground" Value="{StaticResource OverMenuButtonBorderColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource OverMenuButtonBorderColor}" />
            </Trigger>

            <!--  Activated button style  -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource OverMenuButtonBorderColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Menu button icon  -->
    <Style x:Key="menuButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RadioButton}}" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="4"
                    Opacity="25"
                    ShadowDepth="2.5"
                    Color="Gray" />
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Menu button Style For CurrentUser and SignOut  -->
    <Style
        x:Key="menuButtonStyleV2"
        BasedOn="{StaticResource menuButtonStyle}"
        TargetType="RadioButton">
        <Style.Triggers>

            <!--  Button Style on hover  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource Self}}" />
                <Setter Property="Foreground" Value="{StaticResource OverMenuButtonBorderColor}" />
                <Setter Property="BorderBrush" Value="{Binding Path=BorderBrush, RelativeSource={RelativeSource Self}}" />
            </Trigger>

            <!--  Activated button style  -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource OverMenuButtonBorderColor}" />
            </Trigger>

        </Style.Triggers>
    </Style>


    <!--  Control bar button  -->
    <Style x:Key="controlButton" TargetType="Button">
        <!--  Normal button style  -->
        <Setter Property="Width" Value="35" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource actionButtonsColor}" />
        <Setter Property="Margin" Value="10,5,0,0" />
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Button Style on hover  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Tag, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  Menu button icon  -->
    <Style x:Key="controlButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}" />
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />

    </Style>
    <!--  Icon button  -->
    <Style x:Key="iconButton" TargetType="Button">
        <!--  Normal button style  -->
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="25" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource actionButtonsColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Button Style on hover  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  Menu button icon  -->
    <Style x:Key="iconButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
    </Style>
    <!--  Menu button text  -->
    <Style x:Key="menuButtonText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=RadioButton}}" />
        <Setter Property="FontFamily" Value="Montserrat" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="13.5" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>


    <!--#region  Card Button-->
    <Style x:Key="CardButton" TargetType="Button">
        <Setter Property="BorderBrush" Value="{StaticResource SecundarySolidColor}" />
        <Setter Property="BorderThickness" Value="3" />
        <Setter Property="FontFamily" Value="{DynamicResource SFUIDisplay}" />
        <Setter Property="FontSize" Value="34" />
        <Setter Property="Foreground" Value="{StaticResource primarySolidColor}" />
        <Setter Property="Background" Value="{StaticResource SecundarySolidColor}" />
        <Setter Property="Margin" Value="-10,10,40,10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="15">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource SecundarySolidColor}" />
                <Setter Property="Background" Value="{StaticResource primarySolidColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource primaryGradientColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion  Card Button-->

    <!--#region  Text for Card Button-->
    <Style x:Key="TxtCardButton" TargetType="TextBlock">
        <Setter Property="Margin" Value="20,6,20,6" />
        <Setter Property="FontFamily" Value="{Binding Path=FontFamily, RelativeSource={RelativeSource AncestorType=Button}}" />
        <Setter Property="FontSize" Value="{Binding Path=FontSize, RelativeSource={RelativeSource AncestorType=Button}}" />
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}" />
    </Style>
    <!--#endregion Text for Card Button-->

    <!--#region Add Button-->
    <Style x:Key="BtnAgregarStyle" TargetType="Button">
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="{StaticResource SecundarySolidColor}" />
        <Setter Property="Foreground" Value="{StaticResource SecundarySolidColor}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,25,0" />
        <Setter Property="Height" Value="60" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        Padding="5"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="2"
                        CornerRadius="15">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource SecundarySolidColor}" />
                <Setter Property="Foreground" Value="{StaticResource primarySolidColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Icon add Style  -->
    <Style x:Key="AddIconStyle" TargetType="fa:IconImage">
        <Setter Property="Icon" Value="CirclePlus" />
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}" />
        <Setter Property="Margin" Value="0,0,20,0" />
        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!--  TextBlock add Style  -->
    <Style x:Key="TextBlockAddStyle" TargetType="TextBlock">
        <Setter Property="Text" Value="Agregar" />
        <Setter Property="FontSize" Value="22" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Margin" Value="0,0,20,0" />
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!--#endregion  Add Button-->

    <!--#region grid Edit Button-->
    <Style
        x:Key="GridEditButton"
        BasedOn="{StaticResource BtnAgregarStyle}"
        TargetType="Button">
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Margin" Value="0,0,15,0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource SecundarySolidColor}" />
                <Setter Property="Foreground" Value="{StaticResource primarySolidColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion  grid Edit Button-->

    <!--#region grid Edit Icon Style-->
    <Style x:Key="gridEditIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Icon" Value="Trash" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!--#endregion grid Edit Icon-->

    <!--#region grid Delete Button-->
    <Style
        x:Key="GridDeleteButton"
        BasedOn="{StaticResource GridEditButton}"
        TargetType="Button">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource CloseOrDeleteColor}" />
                <Setter Property="Foreground" Value="{StaticResource primarySolidColor}" />
                <Setter Property="BorderBrush" Value="{Binding Path=Background, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion grid Delete Button-->

    <!--#region  grid Delete Icon Style-->
    <Style x:Key="gridDeleteIcon" TargetType="fa:IconImage">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Icon" Value="Trash" />
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!--#endregion grid Delete Icon-->


    <!--#region (Login)Close Button-->
    <Style
        x:Key="LoginCloseButton"
        BasedOn="{StaticResource BtnAgregarStyle}"
        TargetType="Button">
        <Setter Property="Foreground" Value="{StaticResource primarySolidColor}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion (Login)Close Button-->

    <!--#region Switch Style-->
    <LinearGradientBrush x:Key="CheckedBlue" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FF285AB3" />
        <GradientStop Offset="0.5" Color="#FF4184EC" />
        <GradientStop Offset="0.5" Color="#FF558BED" />
        <GradientStop Offset="1" Color="#FF7DACF0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="CheckedOrange" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFCA6A13" />
        <GradientStop Offset="0.2" Color="#FFF67D0C" />
        <GradientStop Offset="0.2" Color="#FFFE7F0C" />
        <GradientStop Offset="0.5" Color="#FFFA8E12" />
        <GradientStop Offset="0.5" Color="#FFFF981D" />
        <GradientStop Offset="1" Color="#FFFCBC5A" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="CheckedOrangeBorder" Color="#FF8E4A1B" />
    <SolidColorBrush x:Key="CheckedBlueBorder" Color="#FF143874" />
    <Style x:Key="OrangeSwitchStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnChecking">
                            <DoubleAnimationUsingKeyFrames
                                BeginTime="00:00:00"
                                Storyboard.TargetName="slider"
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="53" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecking">
                            <DoubleAnimationUsingKeyFrames
                                BeginTime="00:00:00"
                                Storyboard.TargetName="slider"
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <DockPanel x:Name="dockPanel">
                        <ContentPresenter
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Grid>
                            <Border
                                x:Name="BackgroundBorder"
                                Width="94"
                                Height="27"
                                BorderBrush="#FF939393"
                                BorderThickness="1"
                                CornerRadius="3">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#FFB5B5B5" />
                                        <GradientStop Offset="0.1" Color="#FFDEDEDE" />
                                        <GradientStop Offset="0.5" Color="#FFEEEEEE" />
                                        <GradientStop Offset="0.5" Color="#FFFAFAFA" />
                                        <GradientStop Offset="1" Color="#FFFEFEFE" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Ellipse
                                        x:Name="Off"
                                        Grid.Column="1"
                                        Width="14"
                                        Height="14"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Stroke="#FF7A7A7A"
                                        StrokeThickness="2" />
                                    <Line
                                        x:Name="On"
                                        Grid.Column="0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Stroke="#FF7A7A7A"
                                        StrokeThickness="2"
                                        X1="0"
                                        X2="0"
                                        Y1="0"
                                        Y2="14" />
                                </Grid>
                            </Border>
                            <Border
                                x:Name="slider"
                                Width="41"
                                Height="27"
                                Margin="0"
                                HorizontalAlignment="Left"
                                BorderBrush="#FF939393"
                                BorderThickness="1"
                                CornerRadius="3"
                                RenderTransformOrigin="0.5,0.5">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="0" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Border.RenderTransform>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#FFF0F0F0" />
                                        <GradientStop Offset="0.1" Color="#FFCDCDCD" />
                                        <GradientStop Offset="1" Color="#FFFBFBFB" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </Grid>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="OnUnchecking_BeginStoryboard" Storyboard="{StaticResource OnUnchecking}" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="OnChecking_BeginStoryboard" Storyboard="{StaticResource OnChecking}" />
                            </Trigger.EnterActions>
                            <Setter TargetName="On" Property="Stroke" Value="White" />
                            <Setter TargetName="Off" Property="Stroke" Value="White" />
                            <!--  Change Orange or Blue color here  -->
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{StaticResource CheckedOrange}" />
                            <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{StaticResource CheckedOrangeBorder}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <!--  ToDo: Add Style for Isenabled == False  -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion Switch Style-->

    <!--#region  Card Button-->
    <Style x:Key="SearchCardButton" TargetType="Button">
        <Setter Property="BorderBrush" Value="{StaticResource SecundarySolidColor}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontFamily" Value="{DynamicResource SFUIDisplay}" />
        <Setter Property="FontSize" Value="34" />
        <Setter Property="Foreground" Value="{StaticResource primarySolidColor}" />
        <Setter Property="Background" Value="{StaticResource SecundarySolidColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource SecundarySolidColor}" />
                <Setter Property="Background" Value="{StaticResource primarySolidColor}" />
                <Setter Property="BorderBrush" Value="{StaticResource primaryGradientColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion  Card Button-->

</ResourceDictionary>